/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface MyApp {

    }
  }

  interface HTMLMyAppElement extends StencilComponents.MyApp, HTMLStencilElement {}

  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TodoItem {
      'done': boolean;
      'name': string;
    }
  }

  interface HTMLTodoItemElement extends StencilComponents.TodoItem, HTMLStencilElement {}

  var HTMLTodoItemElement: {
    prototype: HTMLTodoItemElement;
    new (): HTMLTodoItemElement;
  };
  interface HTMLElementTagNameMap {
    'todo-item': HTMLTodoItemElement;
  }
  interface ElementTagNameMap {
    'todo-item': HTMLTodoItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'todo-item': JSXElements.TodoItemAttributes;
    }
  }
  namespace JSXElements {
    export interface TodoItemAttributes extends HTMLAttributes {
      'done'?: boolean;
      'name'?: string;
      'onItemChanged'?: (event: CustomEvent<any>) => void;
      'onItemRemoved'?: (event: CustomEvent<number>) => void;
      'onItemToggled'?: (event: CustomEvent<number>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TodoList {

    }
  }

  interface HTMLTodoListElement extends StencilComponents.TodoList, HTMLStencilElement {}

  var HTMLTodoListElement: {
    prototype: HTMLTodoListElement;
    new (): HTMLTodoListElement;
  };
  interface HTMLElementTagNameMap {
    'todo-list': HTMLTodoListElement;
  }
  interface ElementTagNameMap {
    'todo-list': HTMLTodoListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'todo-list': JSXElements.TodoListAttributes;
    }
  }
  namespace JSXElements {
    export interface TodoListAttributes extends HTMLAttributes {
      'onTodoItemsChanged'?: (event: CustomEvent<any>) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
